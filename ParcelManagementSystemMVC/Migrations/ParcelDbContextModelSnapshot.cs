// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParcelManagementSystemMVC.Models;

#nullable disable

namespace ParcelManagementSystemMVC.Migrations
{
    [DbContext(typeof(ParcelDbContext))]
    partial class ParcelDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Branch", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Branch_Id")
                        .HasColumnType("int");

                    b.Property<int>("Parcel_Id")
                        .HasColumnType("int");

                    b.Property<int>("St_Id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("Branch_Id");

                    b.HasIndex("Parcel_Id");

                    b.HasIndex("St_Id");

                    b.ToTable("branches");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Branchdetails", b =>
                {
                    b.Property<int>("Branch_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Branch_Id"));

                    b.Property<string>("BranchCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch_Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch_City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch_Contact")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch_Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch_Pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Branch_State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Branch_Id");

                    b.ToTable("Branchdbs");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.HistoryParcel", b =>
                {
                    b.Property<int>("History_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("History_Id"));

                    b.Property<int>("Parcel_Id")
                        .HasColumnType("int");

                    b.Property<int>("Percel_Id")
                        .HasColumnType("int");

                    b.HasKey("History_Id");

                    b.HasIndex("Parcel_Id");

                    b.ToTable("HistoryParcel");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Parcel.Chargedb", b =>
                {
                    b.Property<int>("Charge_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Charge_Id"));

                    b.Property<float>("Due_Paid")
                        .HasColumnType("real");

                    b.Property<float>("G_Total")
                        .HasColumnType("real");

                    b.Property<int>("Parcel_Id")
                        .HasColumnType("int");

                    b.Property<int>("Percel_Id")
                        .HasColumnType("int");

                    b.Property<float>("Rate")
                        .HasColumnType("real");

                    b.Property<float>("Vat")
                        .HasColumnType("real");

                    b.HasKey("Charge_Id");

                    b.HasIndex("Parcel_Id");

                    b.ToTable("chargedbs");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Parcel.Packagedb", b =>
                {
                    b.Property<int>("Package_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Package_Id"));

                    b.Property<float>("Actual_Wait")
                        .HasColumnType("real");

                    b.Property<string>("Descripton")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Lorry_No")
                        .HasColumnType("int");

                    b.Property<int>("No_of_Package")
                        .HasColumnType("int");

                    b.Property<int>("Parcel_Id")
                        .HasColumnType("int");

                    b.Property<int>("Percel_Id")
                        .HasColumnType("int");

                    b.Property<int>("Tin")
                        .HasColumnType("int");

                    b.Property<float>("Values_of_goods")
                        .HasColumnType("real");

                    b.HasKey("Package_Id");

                    b.HasIndex("Parcel_Id");

                    b.ToTable("packagedbs");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Parcel.Parcels", b =>
                {
                    b.Property<int>("Percel_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Percel_Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date_and_Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("Next_Node")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parcel_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parcel_Shipment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parcel_Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Receiver_Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sender_Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Way_Bill_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Percel_Id");

                    b.ToTable("Parcel");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Parcel.Receiverdetails", b =>
                {
                    b.Property<int>("receiverid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("receiverid"));

                    b.Property<int>("Parcel_Id")
                        .HasColumnType("int");

                    b.Property<string>("receivername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("receiverid");

                    b.HasIndex("Parcel_Id");

                    b.ToTable("receiverdetail");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Parcel.Senderdetails", b =>
                {
                    b.Property<int>("senderid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("senderid"));

                    b.Property<int>("Parcel_Id")
                        .HasColumnType("int");

                    b.Property<string>("sendername")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("senderid");

                    b.HasIndex("Parcel_Id");

                    b.ToTable("senderdetail");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Parcel.UpdateParcel", b =>
                {
                    b.Property<int>("Update_Parcel_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Update_Parcel_Id"));

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Parcel_Id")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Update_Parcel_Id");

                    b.HasIndex("Parcel_Id");

                    b.ToTable("UpdateParcel");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Roles", b =>
                {
                    b.Property<int>("Roll_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Roll_Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Roll_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("rolesdbs");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.staff", b =>
                {
                    b.Property<int>("St_Id")
                        .HasColumnType("int");

                    b.Property<string>("Create_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modify_by")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Parcel_Id")
                        .HasColumnType("int");

                    b.Property<int>("Percel_Id")
                        .HasColumnType("int");

                    b.HasKey("St_Id");

                    b.HasIndex("Parcel_Id");

                    b.ToTable("staff");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.users.Users", b =>
                {
                    b.Property<int>("User_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("User_Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("First_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Last_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("User_Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.users.jobtitles", b =>
                {
                    b.Property<int>("job_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("job_id"));

                    b.Property<int>("St_Id")
                        .HasColumnType("int");

                    b.Property<string>("job_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("job_status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("job_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("job_id");

                    b.HasIndex("St_Id");

                    b.ToTable("jobtitledbs");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.users.staff_details", b =>
                {
                    b.Property<int>("St_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("St_Id"));

                    b.Property<DateTime>("St_End_Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("St_Hire_Date")
                        .HasColumnType("datetime2");

                    b.Property<float>("St_Salary")
                        .HasColumnType("real");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("St_Id");

                    b.HasIndex("User_Id");

                    b.ToTable("totalStaffdbs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Branch", b =>
                {
                    b.HasOne("ParcelManagementSystemMVC.Models.Branchdetails", "branchdetail")
                        .WithMany()
                        .HasForeignKey("Branch_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelManagementSystemMVC.Models.Parcel.Parcels", "parcel")
                        .WithMany()
                        .HasForeignKey("Parcel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelManagementSystemMVC.Models.users.staff_details", "staff_detail")
                        .WithMany()
                        .HasForeignKey("St_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("branchdetail");

                    b.Navigation("parcel");

                    b.Navigation("staff_detail");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.HistoryParcel", b =>
                {
                    b.HasOne("ParcelManagementSystemMVC.Models.Parcel.Parcels", "Parcel")
                        .WithMany()
                        .HasForeignKey("Parcel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Parcel.Chargedb", b =>
                {
                    b.HasOne("ParcelManagementSystemMVC.Models.Parcel.Parcels", "Parcel")
                        .WithMany()
                        .HasForeignKey("Parcel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Parcel.Packagedb", b =>
                {
                    b.HasOne("ParcelManagementSystemMVC.Models.Parcel.Parcels", "Parcel")
                        .WithMany()
                        .HasForeignKey("Parcel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Parcel.Receiverdetails", b =>
                {
                    b.HasOne("ParcelManagementSystemMVC.Models.Parcel.Parcels", "parcel")
                        .WithMany()
                        .HasForeignKey("Parcel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("parcel");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Parcel.Senderdetails", b =>
                {
                    b.HasOne("ParcelManagementSystemMVC.Models.Parcel.Parcels", "parcel")
                        .WithMany()
                        .HasForeignKey("Parcel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("parcel");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Parcel.UpdateParcel", b =>
                {
                    b.HasOne("ParcelManagementSystemMVC.Models.Parcel.Parcels", "Parcel")
                        .WithMany()
                        .HasForeignKey("Parcel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.Roles", b =>
                {
                    b.HasOne("ParcelManagementSystemMVC.Models.users.Users", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.staff", b =>
                {
                    b.HasOne("ParcelManagementSystemMVC.Models.Parcel.Parcels", "Parcel")
                        .WithMany()
                        .HasForeignKey("Parcel_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParcelManagementSystemMVC.Models.users.staff_details", "staff_Detail")
                        .WithMany()
                        .HasForeignKey("St_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parcel");

                    b.Navigation("staff_Detail");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.users.jobtitles", b =>
                {
                    b.HasOne("ParcelManagementSystemMVC.Models.users.staff_details", "staff_Detail")
                        .WithMany()
                        .HasForeignKey("St_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("staff_Detail");
                });

            modelBuilder.Entity("ParcelManagementSystemMVC.Models.users.staff_details", b =>
                {
                    b.HasOne("ParcelManagementSystemMVC.Models.users.Users", "User")
                        .WithMany()
                        .HasForeignKey("User_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
